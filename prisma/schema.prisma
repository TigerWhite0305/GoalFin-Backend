generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String
  password         String
  avatar           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accountSnapshots AccountSnapshot[]
  accounts         Account[]
  goals            Goal[]
  transactions     Transaction[]

  @@map("users")
}

model Account {
  id               String            @id @default(uuid())
  name             String
  type             String
  balance          Float             @default(0)
  currency         String            @default("EUR")
  color            String?
  icon             String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  accountSnapshots AccountSnapshot[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[]

  @@map("accounts")
}

model AccountSnapshot {
  id          String   @id @default(uuid())
  balance     Float
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  dayOfWeek   Int?
  dayOfMonth  Int?
  monthOfYear Int?
  year        Int?
  accountId   String
  userId      String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId, date])
  @@index([userId, date])
  @@index([date])
  @@map("account_snapshots")
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  type        String
  category    String
  description String?
  date        DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Goal {
  id            String    @id @default(uuid())
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  category      String
  icon          String?
  color         String?
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}
