// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// USER MODEL
// ==========================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String   // Hashata con bcrypt
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  accounts     Account[]
  transactions Transaction[]
  goals        Goal[]

  @@map("users")
}

// ==========================================
// ACCOUNT MODEL (Conti/Portafoglio)
// ==========================================

model Account {
  id          String   @id @default(uuid())
  name        String
  type        String   // checking, savings, investment, cash
  balance     Float    @default(0)
  currency    String   @default("EUR")
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

// ==========================================
// TRANSACTION MODEL
// ==========================================

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  type        String   // income, expense, transfer
  category    String
  description String?
  date        DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// ==========================================
// GOAL MODEL (Obiettivi finanziari)
// ==========================================

model Goal {
  id            String    @id @default(uuid())
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  category      String
  icon          String?
  color         String?
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relazioni
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}